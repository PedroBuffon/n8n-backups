{
  "active": true,
  "connections": {
    "Only get new RSS": {
      "main": [
        [
          {
            "node": "Filter Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Only get new RSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Regex": {
      "main": [
        [
          {
            "node": "Discord Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Inputs": {
      "main": [
        [
          {
            "node": "Regex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-12-19T12:52:29.224Z",
  "id": "SQuW5AEhZdPOsbtb",
  "meta": null,
  "name": "Erai Raws Notification",
  "nodes": [
    {
      "parameters": {
        "functionCode": "const staticData = getWorkflowStaticData('global');\nconst newRSSIds = items.map(item => item.json[\"pubDate\"]);\nconst oldRSSIds = staticData.oldRSSIds; \n\nif (!oldRSSIds) {\n  staticData.oldRSSIds = newRSSIds;\n  return items;\n}\n\n\nconst actualNewRSSIds = newRSSIds.filter((id) => !oldRSSIds.includes(id));\nconst actualNewRSS = items.filter((data) => actualNewRSSIds.includes(data.json['pubDate']));\nstaticData.oldRSSIds = [...actualNewRSSIds, ...oldRSSIds];\n\nreturn actualNewRSS;\n"
      },
      "name": "Only get new RSS",
      "type": "n8n-nodes-base.function",
      "position": [
        680,
        80
      ],
      "typeVersion": 1,
      "id": "9925fe22-7786-4bff-b049-ed58105bbd47"
    },
    {
      "parameters": {
        "url": "https://nyaa.si/?page=rss&q=%5BErai-raws%5D+1080p&c=0_0&f=0",
        "options": {}
      },
      "id": "573f2223-6efe-49d5-a919-6e69e8b6ed62",
      "name": "RSS Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        500,
        80
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "id": "5027a9d5-ba88-4479-bf52-0e0e00152003",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        320,
        80
      ]
    },
    {
      "parameters": {
        "channelId": "1041723229569552484",
        "embed": true,
        "title": "={{ $json[\"RegexName\"] }}",
        "url": "={{ $json[\"link\"] }}",
        "authorName": "=Erai-raws",
        "authorUrl": "https://www.erai-raws.info/",
        "description": "=",
        "imageUrl": "=",
        "footerText": "Powered By n8n",
        "timestamp": "={{ $json[\"Date\"] }}"
      },
      "id": "39629446-0dfc-4b16-b4bd-c7d042b90bfb",
      "name": "Discord Send",
      "type": "n8n-nodes-discord-fork.discord",
      "typeVersion": 1,
      "position": [
        1180,
        80
      ],
      "credentials": {
        "discordApi": {
          "id": "pMpClPZ0113ZS7QO",
          "name": "Discord App account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\nconst inputString = item.json.title;\n\n// Define a mapping of language codes to emoji flags\nconst languageToEmoji = {\n    \"ENG\": \"[ðŸ‡¬ðŸ‡§]\",\n    \"POR-BR\": \"[ðŸ‡§ðŸ‡·]\",\n    \"SPA-LA\": \"[ðŸ‡ªðŸ‡¸]\",\n    \"SPA\": \"[ðŸ‡ªðŸ‡¸]\",\n    \"ARA\": \"[ðŸ‡¸ðŸ‡¦]\",\n    \"FRE\": \"[ðŸ‡«ðŸ‡·]\",\n    \"GER\": \"[ðŸ‡©ðŸ‡ª]\",\n    \"ITA\": \"[ðŸ‡®ðŸ‡¹]\",\n    \"RUS\": \"[ðŸ‡·ðŸ‡º]\"\n};\n\n// Remove the \"[Erai-raws]\" portion and the following space\nconst stringWithoutEraiRawsAndMultipleSubtitle = inputString.replace(/\\[Erai-raws\\]\\s+/, '').replace(/\\[Multiple Subtitle\\]\\s+/, '');\n\n// Use a regular expression to extract the language codes\nconst languageCodes = stringWithoutEraiRawsAndMultipleSubtitle.match(/\\[[A-Z-]+\\]/g);\n\n// Replace language codes with emoji flags in square brackets\nconst outputString = stringWithoutEraiRawsAndMultipleSubtitle.replace(/\\[[A-Z-]+\\]/g, (match) => {\n    const languageCode = match.slice(1, -1); // Remove square brackets\n    const emojiFlag = languageToEmoji[languageCode];\n    return emojiFlag ? emojiFlag : match; // Use emoji flag if available, otherwise keep the original code\n});\n  \n  item.json.RegexName = outputString;\n}\n\n\nreturn $input.all();"
      },
      "id": "a92e3403-876f-4ec9-bd5b-25ef7daa7d4c",
      "name": "Regex",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        80
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "title",
              "value": "={{ $json[\"title\"] }}"
            },
            {
              "name": "link",
              "value": "={{ $json[\"link\"] }}"
            },
            {
              "name": "Date",
              "value": "={{ $json[\"isoDate\"] }}"
            },
            {
              "name": "contentSnippet",
              "value": "={{ $json[\"contentSnippet\"] }}"
            },
            {
              "name": "guid",
              "value": "={{ $json[\"guid\"] }}"
            },
            {
              "name": "categories",
              "value": "={{ $json[\"categories\"] }}"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "id": "a9fdcc37-9296-4714-99e0-ca13aecc82a6",
      "name": "Filter Inputs",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        860,
        80
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Sao_Paulo",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "e5gs9CPtjGB5lx52"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": []
    },
    "global": {
      "oldRSSIds": [
        "Fri, 22 Dec 2023 20:06:06 -0000",
        "Fri, 22 Dec 2023 19:19:48 -0000",
        "Fri, 22 Dec 2023 18:41:33 -0000",
        "Fri, 22 Dec 2023 17:41:17 -0000",
        "Fri, 22 Dec 2023 17:07:04 -0000",
        "Fri, 22 Dec 2023 16:44:53 -0000",
        "Fri, 22 Dec 2023 16:05:45 -0000",
        "Fri, 22 Dec 2023 15:36:05 -0000",
        "Fri, 22 Dec 2023 15:07:44 -0000",
        "Fri, 22 Dec 2023 13:35:42 -0000",
        "Thu, 21 Dec 2023 20:30:36 -0000",
        "Thu, 21 Dec 2023 19:43:34 -0000",
        "Thu, 21 Dec 2023 18:16:02 -0000",
        "Thu, 21 Dec 2023 17:55:11 -0000",
        "Thu, 21 Dec 2023 17:17:45 -0000",
        "Thu, 21 Dec 2023 17:11:13 -0000",
        "Thu, 21 Dec 2023 16:12:11 -0000",
        "Thu, 21 Dec 2023 16:05:33 -0000",
        "Thu, 21 Dec 2023 15:35:45 -0000",
        "Thu, 21 Dec 2023 15:00:37 -0000",
        "Thu, 21 Dec 2023 07:06:57 -0000",
        "Wed, 20 Dec 2023 18:28:03 -0000",
        "Wed, 20 Dec 2023 18:05:45 -0000",
        "Wed, 20 Dec 2023 17:57:58 -0000",
        "Wed, 20 Dec 2023 17:03:31 -0000",
        "Wed, 20 Dec 2023 14:35:05 -0000",
        "Wed, 20 Dec 2023 14:30:40 -0000",
        "Wed, 20 Dec 2023 13:00:59 -0000",
        "Wed, 20 Dec 2023 12:27:00 -0000",
        "Tue, 19 Dec 2023 22:45:23 -0000",
        "Tue, 19 Dec 2023 22:39:22 -0000",
        "Tue, 19 Dec 2023 21:30:30 -0000",
        "Tue, 19 Dec 2023 21:15:49 -0000",
        "Tue, 19 Dec 2023 21:13:01 -0000",
        "Tue, 19 Dec 2023 21:10:29 -0000",
        "Tue, 19 Dec 2023 21:06:18 -0000",
        "Tue, 19 Dec 2023 21:03:06 -0000",
        "Tue, 19 Dec 2023 20:58:25 -0000",
        "Tue, 19 Dec 2023 20:54:31 -0000",
        "Tue, 19 Dec 2023 20:50:37 -0000",
        "Tue, 19 Dec 2023 20:47:25 -0000",
        "Tue, 19 Dec 2023 20:44:07 -0000",
        "Tue, 19 Dec 2023 20:40:43 -0000",
        "Tue, 19 Dec 2023 20:30:16 -0000",
        "Tue, 19 Dec 2023 20:27:20 -0000",
        "Tue, 19 Dec 2023 20:24:39 -0000",
        "Tue, 19 Dec 2023 20:21:45 -0000",
        "Tue, 19 Dec 2023 20:18:07 -0000",
        "Tue, 19 Dec 2023 20:15:18 -0000",
        "Tue, 19 Dec 2023 20:11:57 -0000",
        "Tue, 19 Dec 2023 19:14:04 -0000",
        "Tue, 19 Dec 2023 18:30:21 -0000",
        "Tue, 19 Dec 2023 16:35:43 -0000",
        "Tue, 19 Dec 2023 16:05:57 -0000",
        "Mon, 18 Dec 2023 21:17:34 -0000",
        "Mon, 18 Dec 2023 21:02:51 -0000",
        "Mon, 18 Dec 2023 21:01:13 -0000",
        "Mon, 18 Dec 2023 20:58:27 -0000",
        "Mon, 18 Dec 2023 20:56:40 -0000",
        "Mon, 18 Dec 2023 20:52:37 -0000",
        "Mon, 18 Dec 2023 20:51:41 -0000",
        "Mon, 18 Dec 2023 20:47:15 -0000",
        "Mon, 18 Dec 2023 20:42:42 -0000",
        "Mon, 18 Dec 2023 19:12:53 -0000",
        "Mon, 18 Dec 2023 18:37:43 -0000",
        "Mon, 18 Dec 2023 18:10:55 -0000",
        "Mon, 18 Dec 2023 17:48:38 -0000",
        "Mon, 18 Dec 2023 17:04:34 -0000",
        "Mon, 18 Dec 2023 17:04:11 -0000",
        "Mon, 18 Dec 2023 17:01:50 -0000",
        "Mon, 18 Dec 2023 17:00:26 -0000",
        "Mon, 18 Dec 2023 16:58:35 -0000",
        "Mon, 18 Dec 2023 16:58:00 -0000",
        "Mon, 18 Dec 2023 16:57:59 -0000",
        "Mon, 18 Dec 2023 05:49:59 -0000",
        "Sun, 17 Dec 2023 17:14:44 -0000",
        "Sat, 16 Dec 2023 20:08:33 -0000",
        "Sat, 16 Dec 2023 20:08:05 -0000",
        "Thu, 14 Dec 2023 19:15:54 -0000",
        "Thu, 14 Dec 2023 18:53:02 -0000",
        "Thu, 14 Dec 2023 18:19:31 -0000",
        "Thu, 14 Dec 2023 17:55:11 -0000",
        "Thu, 14 Dec 2023 17:19:30 -0000",
        "Thu, 14 Dec 2023 17:17:04 -0000",
        "Thu, 14 Dec 2023 16:11:29 -0000",
        "Thu, 14 Dec 2023 15:36:42 -0000",
        "Thu, 14 Dec 2023 15:06:04 -0000",
        "Wed, 13 Dec 2023 18:28:35 -0000",
        "Wed, 13 Dec 2023 18:02:41 -0000",
        "Wed, 13 Dec 2023 17:57:22 -0000",
        "Wed, 13 Dec 2023 17:05:50 -0000",
        "Wed, 13 Dec 2023 14:34:27 -0000",
        "Wed, 13 Dec 2023 14:30:25 -0000",
        "Wed, 13 Dec 2023 14:27:09 -0000",
        "Wed, 13 Dec 2023 13:08:57 -0000",
        "Tue, 12 Dec 2023 18:30:28 -0000",
        "Tue, 12 Dec 2023 16:39:58 -0000",
        "Tue, 12 Dec 2023 16:12:44 -0000",
        "Mon, 11 Dec 2023 18:36:53 -0000",
        "Mon, 11 Dec 2023 18:25:35 -0000",
        "Mon, 11 Dec 2023 17:32:10 -0000",
        "Mon, 11 Dec 2023 17:05:15 -0000",
        "Mon, 11 Dec 2023 17:00:27 -0000",
        "Mon, 11 Dec 2023 16:35:10 -0000",
        "Mon, 11 Dec 2023 15:51:47 -0000",
        "Mon, 11 Dec 2023 15:33:55 -0000",
        "Mon, 11 Dec 2023 14:37:34 -0000",
        "Mon, 11 Dec 2023 13:38:59 -0000",
        "Sun, 10 Dec 2023 17:46:25 -0000",
        "Sun, 10 Dec 2023 17:01:31 -0000",
        "Sun, 10 Dec 2023 17:00:28 -0000",
        "Sun, 10 Dec 2023 15:35:05 -0000",
        "Sun, 10 Dec 2023 15:34:16 -0000",
        "Sun, 10 Dec 2023 15:14:40 -0000",
        "Sun, 10 Dec 2023 12:18:39 -0000",
        "Sun, 10 Dec 2023 11:10:20 -0000",
        "Sun, 10 Dec 2023 10:37:44 -0000",
        "Sun, 10 Dec 2023 09:06:49 -0000",
        "Sun, 10 Dec 2023 05:28:30 -0000",
        "Sun, 10 Dec 2023 02:47:29 -0000",
        "Sun, 10 Dec 2023 02:22:55 -0000",
        "Sat, 09 Dec 2023 19:16:44 -0000",
        "Sat, 09 Dec 2023 19:16:00 -0000",
        "Sat, 09 Dec 2023 19:12:38 -0000",
        "Sat, 09 Dec 2023 19:03:27 -0000",
        "Sat, 09 Dec 2023 18:47:13 -0000",
        "Sat, 09 Dec 2023 18:16:20 -0000",
        "Sat, 09 Dec 2023 17:41:09 -0000",
        "Sat, 09 Dec 2023 17:35:08 -0000"
      ]
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2023-12-23T02:59:17.941Z",
  "versionId": "90ac0733-40b2-4e48-a6d6-f265a8ff7f71"
}